package com.jy.fistga.data.source.local.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jy.fistga.data.NewsData.NewsImageConvert;
import java.util.List;

import com.jy.fistga.data.News;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS".
*/
public class NewsDao extends AbstractDao<News, String> {

    public static final String TABLENAME = "NEWS";

    /**
     * Properties of entity News.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property NewsId = new Property(0, String.class, "newsId", true, "NEWS_ID");
        public final static Property Pageviews = new Property(1, int.class, "pageviews", false, "PAGEVIEWS");
        public final static Property ImageListThumb = new Property(2, String.class, "imageListThumb", false, "IMAGE_LIST_THUMB");
        public final static Property IsTop = new Property(3, int.class, "isTop", false, "IS_TOP");
        public final static Property LayoutType = new Property(4, int.class, "layoutType", false, "LAYOUT_TYPE");
        public final static Property Origin = new Property(5, String.class, "origin", false, "ORIGIN");
        public final static Property PublishTime = new Property(6, String.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
    };

    private final NewsImageConvert imageListThumbConverter = new NewsImageConvert();

    public NewsDao(DaoConfig config) {
        super(config);
    }
    
    public NewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS\" (" + //
                "\"NEWS_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: newsId
                "\"PAGEVIEWS\" INTEGER NOT NULL ," + // 1: pageviews
                "\"IMAGE_LIST_THUMB\" TEXT," + // 2: imageListThumb
                "\"IS_TOP\" INTEGER NOT NULL ," + // 3: isTop
                "\"LAYOUT_TYPE\" INTEGER NOT NULL ," + // 4: layoutType
                "\"ORIGIN\" TEXT," + // 5: origin
                "\"PUBLISH_TIME\" TEXT," + // 6: publishTime
                "\"TITLE\" TEXT);"); // 7: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, News entity) {
        stmt.clearBindings();
 
        String newsId = entity.getNewsId();
        if (newsId != null) {
            stmt.bindString(1, newsId);
        }
        stmt.bindLong(2, entity.getPageviews());
 
        List imageListThumb = entity.getImageListThumb();
        if (imageListThumb != null) {
            stmt.bindString(3, imageListThumbConverter.convertToDatabaseValue(imageListThumb));
        }
        stmt.bindLong(4, entity.getIsTop());
        stmt.bindLong(5, entity.getLayoutType());
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(6, origin);
        }
 
        String publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindString(7, publishTime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, News entity) {
        stmt.clearBindings();
 
        String newsId = entity.getNewsId();
        if (newsId != null) {
            stmt.bindString(1, newsId);
        }
        stmt.bindLong(2, entity.getPageviews());
 
        List imageListThumb = entity.getImageListThumb();
        if (imageListThumb != null) {
            stmt.bindString(3, imageListThumbConverter.convertToDatabaseValue(imageListThumb));
        }
        stmt.bindLong(4, entity.getIsTop());
        stmt.bindLong(5, entity.getLayoutType());
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(6, origin);
        }
 
        String publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindString(7, publishTime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public News readEntity(Cursor cursor, int offset) {
        News entity = new News( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // newsId
            cursor.getInt(offset + 1), // pageviews
            cursor.isNull(offset + 2) ? null : imageListThumbConverter.convertToEntityProperty(cursor.getString(offset + 2)), // imageListThumb
            cursor.getInt(offset + 3), // isTop
            cursor.getInt(offset + 4), // layoutType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // origin
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // publishTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, News entity, int offset) {
        entity.setNewsId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPageviews(cursor.getInt(offset + 1));
        entity.setImageListThumb(cursor.isNull(offset + 2) ? null : imageListThumbConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setIsTop(cursor.getInt(offset + 3));
        entity.setLayoutType(cursor.getInt(offset + 4));
        entity.setOrigin(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPublishTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(News entity, long rowId) {
        return entity.getNewsId();
    }
    
    @Override
    public String getKey(News entity) {
        if(entity != null) {
            return entity.getNewsId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
