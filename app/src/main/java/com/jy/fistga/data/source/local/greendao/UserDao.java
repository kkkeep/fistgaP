package com.jy.fistga.data.source.local.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jy.fistga.data.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Comments = new Property(0, int.class, "comments", false, "COMMENTS");
        public final static Property Favorites = new Property(1, int.class, "favorites", false, "FAVORITES");
        public final static Property Following = new Property(2, int.class, "following", false, "FOLLOWING");
        public final static Property HistoryReads = new Property(3, int.class, "historyReads", false, "HISTORY_READS");
        public final static Property IsWifiImages = new Property(4, int.class, "isWifiImages", false, "IS_WIFI_IMAGES");
        public final static Property Nickname = new Property(5, String.class, "nickname", false, "NICKNAME");
        public final static Property PersonalProfile = new Property(6, String.class, "personalProfile", false, "PERSONAL_PROFILE");
        public final static Property HeadImagePath = new Property(7, String.class, "headImagePath", false, "HEAD_IMAGE_PATH");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property UnMessages = new Property(9, int.class, "unMessages", false, "UN_MESSAGES");
        public final static Property UserId = new Property(10, String.class, "userId", true, "USER_ID");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"COMMENTS\" INTEGER NOT NULL ," + // 0: comments
                "\"FAVORITES\" INTEGER NOT NULL ," + // 1: favorites
                "\"FOLLOWING\" INTEGER NOT NULL ," + // 2: following
                "\"HISTORY_READS\" INTEGER NOT NULL ," + // 3: historyReads
                "\"IS_WIFI_IMAGES\" INTEGER NOT NULL ," + // 4: isWifiImages
                "\"NICKNAME\" TEXT," + // 5: nickname
                "\"PERSONAL_PROFILE\" TEXT," + // 6: personalProfile
                "\"HEAD_IMAGE_PATH\" TEXT," + // 7: headImagePath
                "\"PHONE\" TEXT," + // 8: phone
                "\"UN_MESSAGES\" INTEGER NOT NULL ," + // 9: unMessages
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL );"); // 10: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getComments());
        stmt.bindLong(2, entity.getFavorites());
        stmt.bindLong(3, entity.getFollowing());
        stmt.bindLong(4, entity.getHistoryReads());
        stmt.bindLong(5, entity.getIsWifiImages());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String personalProfile = entity.getPersonalProfile();
        if (personalProfile != null) {
            stmt.bindString(7, personalProfile);
        }
 
        String headImagePath = entity.getHeadImagePath();
        if (headImagePath != null) {
            stmt.bindString(8, headImagePath);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
        stmt.bindLong(10, entity.getUnMessages());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(11, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getComments());
        stmt.bindLong(2, entity.getFavorites());
        stmt.bindLong(3, entity.getFollowing());
        stmt.bindLong(4, entity.getHistoryReads());
        stmt.bindLong(5, entity.getIsWifiImages());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String personalProfile = entity.getPersonalProfile();
        if (personalProfile != null) {
            stmt.bindString(7, personalProfile);
        }
 
        String headImagePath = entity.getHeadImagePath();
        if (headImagePath != null) {
            stmt.bindString(8, headImagePath);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
        stmt.bindLong(10, entity.getUnMessages());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(11, userId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getInt(offset + 0), // comments
            cursor.getInt(offset + 1), // favorites
            cursor.getInt(offset + 2), // following
            cursor.getInt(offset + 3), // historyReads
            cursor.getInt(offset + 4), // isWifiImages
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // personalProfile
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // headImagePath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.getInt(offset + 9), // unMessages
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setComments(cursor.getInt(offset + 0));
        entity.setFavorites(cursor.getInt(offset + 1));
        entity.setFollowing(cursor.getInt(offset + 2));
        entity.setHistoryReads(cursor.getInt(offset + 3));
        entity.setIsWifiImages(cursor.getInt(offset + 4));
        entity.setNickname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPersonalProfile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHeadImagePath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUnMessages(cursor.getInt(offset + 9));
        entity.setUserId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
